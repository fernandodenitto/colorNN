%------------    DATA PRE-PROCESSING FOR FUZZY    --------------%

disp("Manipulating the Dataset for the Fuzzy Set...")

% CONVERTO LE COORDINATE Lab in COORDINATE Lch DEI MASTER
masterLch=lab2lch(masterCopyLab(1:3,:)')';

% CONVERTO LA COORDINATA C IN TERMINI PERCENTUALI PER POTER LAVORARE CON LA
% RETE ANFIS E POTER VERIFICARE OPPORTUNAMENTE LE REGOLE (DOVE LA
% COORDINATA C HA UN INTERVALLO CHE VA DA 0 A 100)
masterLchPerc=masterLch;

for i=1:size(masterLchPerc,2)
    c2cperc(masterLchPerc(1,i),masterLchPerc(2,i));
    masterLchPerc(2,i)=c2cperc(masterLchPerc(1,i),masterLchPerc(2,i));
end

% CREO LA MATRICE DI INGRESSI PER LA RETE ANFIS CHE AVRÀ COME PRIME 3
% COLONNE LE COORDINATE LCH DEL COLORE MASTER E COME ULTIMA IL DELTA_E
% COME DA SPECIFICHE DI PROGETTO
inputFuzzyLch=[masterLchPerc;deltaE];

clear masterLch masterLchPerc 

%------------    APPLICATION OF THE FIS NETWORK    --------------%

disp("Reading the ANFIS...")

fuzzyColorSystem = readfis('fuzzysystem');

deltaEfuzzy=evalfis(fuzzyColorSystem,inputFuzzyLch')';

% SELEZIONO GLI INGRESSI PER CUI NON SI APPLICANO LE FUZZY RULES PER
% LASCIARE IL DELTA_E INALTERATO
indexesToKeepOld=notInFuzzy(inputFuzzyLch');

% IMMETTO NEL NUOVO VETTORE DELTA_E IL VECCHIO VALORE LI DOVE NON SI
% APPLICANO LE REGOLE
for i=1:size(deltaE)
    if ismember(i,indexesToKeepOld)
        deltaEfuzzy(i)=deltaE(i);
    end
end

% A QUESTO PUNTO ABBIAMO CHE IL VETTORE DI OUTPUT DELLA RETE NEURALE DOVRA
% ESSERE QUELLO CORRETTO DALLA RETE FUZZY (DELTA_E_FUZZY) E SI PUÒ
% PROCEDERE NUOVAMENTE CON IL TRANING DELLA RETE PER VERIFICARE LE NUOVE
% PRESTAZIONI.

%------------  FEATURES  SELECTION          --------------%
% disp("Feature Extraction Phase")
% featureExtraction

%Per saltare il processo di featureSelection
disp("Feature Selection Phase")
featuresSelected=[1  7 16  22];
% featureSelection

%------------    TRAINING OF NEURAL NETWORKWORK    --------------%

% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by NFTOOL
%
% This script assumes these variables are defined:
%
%   houseInputs - input data.
%   houseTargets - target data.
 

disp("Training the Neural netFuzzywork")

inputs = masterCopyFeatures(featuresSelected,:);
targets = deltaEfuzzy;
 
% Create a Fitting netFuzzywork
hiddenLayerSize = 4;
netFuzzy = fitnet(hiddenLayerSize);

% Set up Division of Data for Training, Validation, Testing
netFuzzy.divideParam.trainRatio = 70/100;
netFuzzy.divideParam.valRatio = 15/100;
netFuzzy.divideParam.testRatio = 15/100;
 
% Train the netFuzzywork
[netFuzzy,tr] = train(netFuzzy,inputs,targets);
 
% Test the netFuzzywork
outputsFuzzyNN = netFuzzy(inputs);
errorsFuzzyNN = gsubtract(outputsFuzzyNN,targets);
performanceFuzzyNN = perform(netFuzzy,targets,outputsFuzzyNN)
regressionFuzzyNN = regression(targets,outputsFuzzyNN)
disp("Neural netFuzzywork Trained!")

% View the netFuzzywork
view(netFuzzy)
 
% Plots
% Uncomment these lines to enable various plots.
% figure, plotperform(tr)
% figure, plottrainstate(tr)
% figure, plotfit(targets,outputs)
% figure, plotregression(targets,outputs)
% figure, ploterrhist(errors)